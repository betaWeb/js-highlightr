!function(t){var r={};function e(i){if(r[i])return r[i].exports;var n=r[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,e),n.l=!0,n.exports}e.m=t,e.c=r,e.d=function(t,r,i){e.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:i})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,r){if(1&r&&(t=e(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var n in t)e.d(i,n,function(r){return t[r]}.bind(null,n));return i},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,"a",r),r},e.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},e.p="",e(e.s=0)}([function(t,r,e){t.exports=e(1)},function(t,r,e){const i=e(2);String.prototype.highlight||(String.prototype.highlight=function(t,r={}){return new i(r).highlight(this,t)}),Array.prototype.highlightMany||(Array.prototype.highlightMany=function(t,r={}){return new i(r).highlightMany(this,t)})},function(t,r,e){const i=e(3);t.exports=i},function(t,r){t.exports=class{constructor(t={}){this.setOptions(t)}highlight(t,r){if(!t)throw new Error("Highlight::highlight - context parameter is required and must be of type string");if(!r)throw new Error("Highlight::highlight - searchable parameter is required and must be of type string or array");if(r&&r.length){let e=this._prepare(r.trim());return 1===e.length||e.length>1&&this._belongsToContext(r,t)?this._highlightWord(t,r):e.reduce(this._highlightWord.bind(this),t)}return t}highlightMany(t,r){if(!t||!Array.isArray(t))throw new Error("Highlight::highlightMany - contextArray parameter must be of type array");return t.reduce((t,e)=>(t.push(this.highlight(e,r)),t),[])}setOptions(t={}){this._params={html_attrs:{},html_tag:"span",css_classes:"search__highlight",regexp:"__exp__",regexp_flags:"gi",word_min_length:2,...t}}_prepare(t){return(t.constructor===String?t.split(" "):t).filter((t,r,e)=>e.indexOf(t)===r).filter(t=>t.length>this._params.word_min_length).map(t=>t.trim())}_highlightWord(t,r,e=0){return t.replace(this._buildRegExp(r),this._buildTemplate(r,e))}_belongsToContext(t,r){return new RegExp(t,"gi").test(r)}_buildRegExp(t){return new RegExp(this._params.regexp.replace("__exp__",t),this._params.regexp_flags)}_buildTemplate(t,r){return`<${this._params.html_tag} class="${this._params.css_classes}" ${this._buildAttrs()} data-highlight="hl_${r+1}">${t}</${this._params.html_tag}>`}_buildAttrs(){if(!Object.keys(this._params.html_attrs).length)return" ";let t=[""];for(let r in this._params.html_attrs)this._params.html_attrs.hasOwnProperty(r)&&t.push(`${r}="${this._params.html_attrs[r]}"`);return t.join(" ")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,