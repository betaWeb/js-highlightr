!function(t){var e={};function r(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)r.d(i,n,function(e){return t[e]}.bind(null,n));return i},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){t.exports=r(1)},function(t,e,r){const i=r(2);String.prototype.highlight||(String.prototype.highlight=function(t,e={}){return new i(e).highlight(this,t)}),Array.prototype.highlight||(Array.prototype.highlight=function(t,e={}){return new i(e).highlightMany(this,t)}),Node.prototype.highlight||(Node.prototype.highlight=function(t,e={}){const r=new i(e);return this.innerHTML=r.highlight(this.innerText,t),this})},function(t,e,r){const i=r(3);t.exports=i},function(t,e){t.exports=class{constructor(t={}){this.setOptions(t)}highlight(t,e){return t&&t.length?e&&e.length?this._highlight(t,e):t:""}highlightMany(t,e){if(!t||!Array.isArray(t))throw new Error("Highlight::highlightMany - contextArray parameter must be of type array");return t.reduce((t,r)=>(t.push(this.highlight(r,e)),t),[])}setOptions(t={}){this._params={html_attrs:{},html_tag:"span",css_classes:"search__highlight",regexp:"__exp__",regexp_flags:"gi",word_min_length:2,...t}}_prepare(t){const e=t;return(t=t.constructor===String?t.split(" "):t).unshift(e),t.filter((t,e,r)=>r.indexOf(t)===e).filter(t=>t.length>this._params.word_min_length).map(t=>t.trim()).join("|")}_highlight(t,e){return(e=this._prepare(e)).length?t.replace(this._buildRegExp(e),t=>this._buildTemplate(t)):t}_belongsToContext(t,e){return new RegExp(t,"gi").test(e)}_buildRegExp(t){return new RegExp(this._params.regexp.replace("__exp__",t),this._params.regexp_flags)}_buildTemplate(t){return`<${this._params.html_tag} class="${this._params.css_classes}" ${this._buildAttrs()} js-highlightr>${t}</${this._params.html_tag}>`}_buildAttrs(){if(!Object.keys(this._params.html_attrs).length)return" ";let t=[""];for(let e in this._params.html_attrs)this._params.html_attrs.hasOwnProperty(e)&&t.push(`${e}="${this._params.html_attrs[e]}"`);return t.join(" ")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,